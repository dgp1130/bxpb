<!-- This is the README documentation which NPM will pick up. -->

# `@bxpb/protoc-plugin`

The compiler plugin for `protoc` which generates client and service TypeScript code for
[Browser Extension Protocol Buffers (BXPB)](https://github.com/dgp1130/bxpb/packages/protoc-plugin/).

See the [Getting Started](https://github.com/dgp1130/bxpb/wiki/Getting-Started) guide for a more
complete tutorial.

## Usage

Start by
[installing `protoc`](https://github.com/protocolbuffers/protobuf#protocol-compiler-installation).
You can use `grpc_tools_node_protoc` from [`grpc-tools`](https://www.npmjs.com/package/grpc-tools)
if you want something installable from NPM. You'll also want `protoc-gen-ts` from
[`grpc_tools_node_protoc_ts`](https://www.npmjs.com/package/grpc_tools_node_protoc_ts) to generate
TypeScript definitions for the protos.

Then run (replace `protoc` with `node_modules/.bin/grpc_tools_node_protoc` if necessary):

```shell
npm install @bxpb/protoc-plugin@1.0.0 @grpc-tools@1.9.0

protoc --js_out=import_style=commonjs,binary:proto/ \
    --plugin=protoc-gen-ts=node_modules/.bin/protoc-gen-ts --ts_out=proto/ \
    --plugin=protoc-gen-bxpb=node_modules/.bin/bxpb-protoc-plugin --bxpb_out=proto/ \
    greeter.proto
```

This will compile `greeter.proto` in the current directory and generate TypeScript definitions for BXPB
under the `proto/` directory. See the
[Getting Started](https://github.com/dgp1130/bxpb/wiki/Getting-Started#building-protos-with-bxpb)
guide for more info. TL;DR: This will output:

```
proto/greeter_bxservices.d.ts
proto/greeter_bxservices.js
proto/greeter_bxclients.d.ts
proto/greeter_bxclients.js
```

The first two files contain definitions to run the proto service, while the last two files contain
definitions to call the service.

### Using the Generated Code

Once the code has geen generated, each service will export a `serve${proto_service_name}()` function
which will run the service on a particular Chrome messaging API and strongly type check the provided
implementation. Each client will export a `${proto_service_name}Client` class which can be
constructed with the Chrome messaging API to use to connect to the service, along with methods for
each RPC of the proto service.

See
[Getting Started](https://github.com/dgp1130/bxpb/wiki/Getting-Started#implementing-and-calling-the-service)
for a complete example.